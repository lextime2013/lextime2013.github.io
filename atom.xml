<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lex雷克斯vIp</title>
  <subtitle>我的世界我的梦</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-14T13:55:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lextime2013</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android官方MVP架构学习分析</title>
    <link href="http://yoursite.com/2017/01/14/Android%E5%AE%98%E6%96%B9MVP%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/01/14/Android官方MVP架构学习分析/</id>
    <published>2017-01-14T13:37:00.000Z</published>
    <updated>2017-01-14T13:55:34.000Z</updated>
    
    <content type="html">&lt;p&gt;每次看MVC架构的项目时，都会在比较臃肿的Activity、Fragment里面阅读，对一个界面的逻辑理解并不是那么的清晰。当然，Android的MVC架构，很多都不是特别的清晰，因为Activity作为控制器，却做了很多视图的处理，或者把Activity理解成为视图，却拥有着大量的控制器逻辑。MVP架构会在这个MVC基础上锦上添花。虽然会添加很多接口类，但清晰度上面提高了，后面通过泛型应该也可以简约更多的代码。&lt;/p&gt;
&lt;p&gt;Android官方MVP架构:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;https://github.com/googlesamples/android-architecture&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;学习后分析了一下，先上图&lt;br&gt;&lt;img src=&quot;https://github.com/lextime2013/lex/blob/gh-pages/images/pic_android_mvp_mine.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Activity作为MVP的主控制，初始化Precenter（P）、Fragment（V）、TasksRepository（M），View层响应UI事件，并通过Precenter层去获取数据，Precenter会通过调用Model层去获取内存中缓存的、本地数据库的、网络服务器的数据，最终通过回调方法响应数据到View层显示。&lt;/p&gt;
&lt;p&gt;从契约类Contract可以看出，Precenter跟View层的接口都比较清晰的查看，而Model层则是通过实现TasksDataSource接口，达到数据获取、网络数据获取、本地数据获取，都是实现相同的接口。因此三者具体的交互应该是这样的&lt;br&gt;&lt;img src=&quot;https://github.com/lextime2013/lex/blob/gh-pages/images/pic_android_mvp_3.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每次看MVC架构的项目时，都会在比较臃肿的Activity、Fragment里面阅读，对一个界面的逻辑理解并不是那么的清晰。当然，Android的MVC架构，很多都不是特别的清晰，因为Activity作为控制器，却做了很多视图的处理，或者把Activity理解成为视图，却拥有着大量的控制器逻辑。MVP架构会在这个MVC基础上锦上添花。虽然会添加很多接口类，但清晰度上面提高了，后面通过泛型应该也可以简约更多的代码。&lt;/p&gt;
&lt;p&gt;Android官方MVP架构:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;https://github.com/googlesamples/android-architecture&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;学习后分析了一下，先上图&lt;br&gt;&lt;img src=&quot;https://github.com/lextime2013/lex/blob/gh-pages/images/pic_android_mvp_mine.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《小钱狗狗》语录</title>
    <link href="http://yoursite.com/2017/01/08/%E3%80%8A%E5%B0%8F%E9%92%B1%E7%8B%97%E7%8B%97%E3%80%8B%E8%AF%AD%E5%BD%95/"/>
    <id>http://yoursite.com/2017/01/08/《小钱狗狗》语录/</id>
    <published>2017-01-08T07:45:00.000Z</published>
    <updated>2017-01-08T07:47:22.000Z</updated>
    
    <content type="html">&lt;p&gt;2017年了，《小钱狗狗》这本书是去年就想要读的一本书，其实只需要花一个下午的时间可以读完。这本书是面向于小朋友的一本理财书籍，但成年人作为理财入门也算是一本不错的书籍。前段时间，因为参与活动得到了一本三公子写的《工作前5年，决定你一生的财富》，感觉跟《小钱狗狗》是差不多的一个思路。&lt;/p&gt;
&lt;p&gt;不求专业，但必须要了解是怎么一回事，这是前段时间听到一个人的一句话，觉得非常有道理。比如理财，是必须要学习的一门课程，虽然我没有什么财。&lt;/p&gt;
&lt;p&gt;这本书介绍的是主人公无意中捡到一只小狗，并取名钱钱，钱钱居然会说话，并教会了主人公很多理财方面的知识。然后通过介绍了主人公的很多朋友、邻居等人的理财活动，讲述了理财的知识。具体的内容就不说了，但里面有一些话还是非常值得思考的，当然也可以理解成为心灵鸡汤。我也做过基金投资，也做出了非常错误的操作，因此对我来说很多是醍醐灌顶，其实跟做人处事的态度也是非常类似。我觉得自己非常有必要学习、记录下来。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;以下文字均出自于《小钱狗狗》书籍：&lt;/p&gt;
&lt;p&gt;请你在明天之前想出十个你想变得更富有的原因，然后用笔写下来。&lt;/p&gt;
&lt;p&gt;我建议你拿一本影集作为你的愿望影集。收集一些与自己的愿望有关的照片，把它们贴在影集里。我们要通过图片来思考。&lt;/p&gt;
&lt;p&gt;你拿一本空本子或者一本日记本，给它取名叫做‘成功日记’。然后你就把所有做成功的事情记录进去。你最好每天都做这件事，每次都至少写五条你个人的成果。任何小事都可以。&lt;/p&gt;
&lt;p&gt;一个人挣钱多少是和他的自信心联系在一起的。还有就是取决于他的精力是集中在自己的能力范围之内，还是放到了他力所不能及的事情上。&lt;/p&gt;
&lt;p&gt;没有我的成功日记本，我就不会去思考自己适合在哪些地方赚钱。&lt;/p&gt;
&lt;p&gt;不能在困难面前逃跑。对困难、犯错误和丢面子的恐惧已经破坏了无数人的生活。&lt;/p&gt;
&lt;p&gt;不要为失去的东西而忧伤，而要对拥有它的时光心存感激。&lt;/p&gt;
&lt;p&gt;钱钱语录:金钱有一些秘密和规律，要想了解这些秘密和规律，前提条件是，你自己必须真的有这个愿望。&lt;/p&gt;
&lt;p&gt;不是试试看，而是去行动!如果你只是带着 试试看的心态，那么你最后只会以失败而告终，你会一事无成。尝试纯粹是一种借口，你 还没有做，就已经给自己想好了退路。不能试验，你只有两个选择——做或者不做。&lt;/p&gt;
&lt;p&gt;学习就是认识新观念和新想法的过程。&lt;/p&gt;
&lt;p&gt;机会到处都是，但是只有在你寻找它的时候，你才能看见它。只有当你心中有了强烈的欲望，你才会去寻觅机会。而当你想像的时候，强烈的欲望就产生了。&lt;/p&gt;
&lt;p&gt;钱钱语录:如果你只是带着试试看的心态，那么你最后只会以失败而告终，你会一事无成。尝试纯粹是一种借口，你还没有做，就已经给自己想好退路了。不能试验。你只有两个选择:做，或者不做。&lt;/p&gt;
&lt;p&gt;钱钱语录:你是否能挣到钱，最关键的因素并不在于你是不是有一个好点子。你有多聪明也不是主要原因，决定因素是你的自信程度。&lt;/p&gt;
&lt;p&gt;一个人把精力集中在自己所能做的，知道的和拥有的东西上的那一天起，他的成功就已经拉开了序幕。这也使得一个孩子完全有能力比成人挣到更多的钱。&lt;/p&gt;
&lt;p&gt;你的自信程度决定了你是否相信自己的能力，你是否相信你自己。假如你根本不相信你能做到的话，那么你就根本不会动手去做，而假如你不开始去做，那么你就什么也得不到。&lt;/p&gt;
&lt;p&gt;第一，你无论在什么时候都 不能把希望只寄托在一份工作上。它持续的时间不会像你设想的那么长。所以你要立即寻 找另一份替代的工作。&lt;br&gt;第二，你肯定会遇到一些困难，这些因难是你现在还难以预料的。&lt;/p&gt;
&lt;p&gt;钱钱语录:你最好想清楚，你喜欢做什么，然后再考虑你怎么用它来挣钱。&lt;/p&gt;
&lt;p&gt;你应该在自己遇到困难的时候，仍然坚持自己的意愿。当一切正常的时候，每个人都能做到这一点。可是当真正的困难出现的时候，才见了分晓。只有少数人能坚定不移地贯彻自己的决定。那些非常成功的人，甚至有能力在他们困难最多的时候做出最杰出的成绩。情况顺利的时候，人人都能挣到钱。只有在逆境中，一切才能见分晓。&lt;/p&gt;
&lt;p&gt;困难总是在不断地出现。尽管如此，你要每天不间断地去做对你的未来意义重大的事情。你为此花费的时间不会超过10分钟，但是就是这10分钟会让 一切变得不同。大多数人总是在现有的水平上停滞不前，就是因为他们没有拿出这10分钟。   &lt;/p&gt;
&lt;p&gt;他们总是期望情况能向着有利于自己的方向转化，但是他们忽视了一点，那就是，他们首先必须先改变自己。&lt;/p&gt;
&lt;p&gt;当你决定做一件事情的时候，你必须在72小时之内完成它，否则你很可能就永远不会再做了。&lt;/p&gt;
&lt;p&gt;钱钱语录:你要每天不间断地去做对称的未来意义重大的事情。你为此花费的时间不 会超过10分钟，但是就是这10分钟会让一切变得不同。&lt;br&gt;“大多数人觉得，工作肯定是一件艰苦而令人不愉快的事情，其实只 有做自己喜欢的事情的人，才能真正获得成功。&lt;/p&gt;
&lt;p&gt;钱钱语录:&lt;br&gt;欠债的人应当毁掉所有的信用卡。&lt;br&gt;应当尽可能少地偿还贷款。&lt;br&gt;应当将不用于生活的那部分钱中的一半存起来，另一半用于还债。最好不要申请消费贷款。&lt;br&gt;每次借债前问自己:“这真的有必要吗?”&lt;/p&gt;
&lt;p&gt;有的时候。疯狂的念头比普通的小目标更容易达到。当你定下大目标的时候，就意味着你必须付 出比别人多得多的努力。&lt;/p&gt;
&lt;p&gt;鹅代表你的钱。如果你存钱，你会得到利息。利息就是金蛋。&lt;/p&gt;
&lt;p&gt;钱钱语录:当你定下了大目标的时候，就意味着你必须付付出比别人多得多的努力。&lt;/p&gt;
&lt;p&gt;钱钱语录:假如我没有了我的“鹅”，我就总是得为了赚钱而工作，但是一旦我有了属 于自己的“鹅”，我的钱就会自动为我工作了。&lt;/p&gt;
&lt;p&gt;笨人只有一次好运，聪明人永远都有好运。&lt;/p&gt;
&lt;p&gt;钱钱语录:幸运其实只是充分准备加上努力工作的结果。&lt;/p&gt;
&lt;p&gt;一个人要想过更幸福、更满意的生活，就得对自身进行改变。这和钱无关，金钱本身既不会使人幸福也不会带来不幸。金钱是中性的，既不好，也不坏。只有当钱属于某一个人的时候，它才会对这个人产生好的或者坏的影响。然后，钱要么被用于好的用途，要么被用作坏的用途。一个幸福的人有了钱会更幸福；而一个悲观忧虑的人，钱越多，烦恼就越多。&lt;/p&gt;
&lt;p&gt;钱钱语录:钱只令留在那些为之付出努力的人身边，用非法手段取得不义之财的人，反而会比没钱的时候感觉更糟糕。&lt;/p&gt;
&lt;p&gt;当你记成功日记的时候，你会对自身、对世界，还有对成功的规律做更深入的思考，你就会越来越多地了解自己和自己的愿望，这会使你有能力去理解别人。要彻底了解自己和世界上的所有秘密，是我们无法完全实现的一种理想。但我们可以一步一步地慢慢接近这个理想。&lt;/p&gt;
&lt;p&gt;钱钱语录:恐惧总是在我们设想事情会如何不顺的时候出现。我们对失败的可能性想得越多，就越害怕。而当你朝看积极的目标去思考的时候，就不会心生畏惧。&lt;/p&gt;
&lt;p&gt;1.确定自己喜欢获得财务上的成功。&lt;br&gt;2.自信，有想法，做自己喜欢做的事。&lt;br&gt;3.把钱分成日常开销、梦想目标和金鹅账户三部分。&lt;br&gt;4.进行明智的投资。&lt;br&gt;5.享受生活。&lt;/p&gt;
&lt;p&gt;1.应该把钱投资在安全的地方。&lt;br&gt;2.我的钱应该下很多全蛋。&lt;br&gt;3.我们的投资应该简单明白。&lt;/p&gt;
&lt;p&gt;决定一件东西价值多少的惟一因素就是你愿意为它支付多少钱。&lt;/p&gt;
&lt;p&gt;钱钱语录:&lt;br&gt;1.确定自己希望获得财务上的成功。&lt;br&gt;2.自信，有想法，做自己喜欢做的事。&lt;br&gt;3.把钱分成日常开销、梦想目标和金鹅账户三部分。&lt;br&gt;4.进行明智的投资。&lt;br&gt;5.享受生活。&lt;/p&gt;
&lt;p&gt;一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情。&lt;/p&gt;
&lt;p&gt;钱钱语录:如果你没有做今天这件事情，你就永远不会知道，给自己一些压力之后，你能够做到些什么。一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情。&lt;/p&gt;
&lt;p&gt;钱钱语录:&lt;br&gt;挑选基金时的注意事项:&lt;br&gt;1.基金应该至少有十年历史。假如它在这么长时间内一直有丰厚的盈利，那我们可以 认为，它在未来也会运作良好。   2.应该选择大型的跨国股票基金，这种基金在世界各地购买股票，以此分做风险，所以十分安全。   3.对基金的走势图进行比较。我们应该观察在过去10年间哪些基金的年终获利最好。&lt;/p&gt;
&lt;p&gt;用72除以投资的年收益率的百分比，得出的数字就是这笔钱翻一倍所要的年数。&lt;/p&gt;
&lt;p&gt;钱钱语录:每当冬天过后，春天就来了，接看是夏天，每个夏天之后又跟者是秋天，然后又是冬天，年年如此。跟大自然的变化一样，交易所里也总有四季更替，循环往复。&lt;/p&gt;
&lt;p&gt;钱钱语录:最主要的是，在人们眼中钱应该是一种再自然、再普通不过的东西了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;2017年了，《小钱狗狗》这本书是去年就想要读的一本书，其实只需要花一个下午的时间可以读完。这本书是面向于小朋友的一本理财书籍，但成年人作为理财入门也算是一本不错的书籍。前段时间，因为参与活动得到了一本三公子写的《工作前5年，决定你一生的财富》，感觉跟《小钱狗狗》是差不多的一个思路。&lt;/p&gt;
&lt;p&gt;不求专业，但必须要了解是怎么一回事，这是前段时间听到一个人的一句话，觉得非常有道理。比如理财，是必须要学习的一门课程，虽然我没有什么财。&lt;/p&gt;
&lt;p&gt;这本书介绍的是主人公无意中捡到一只小狗，并取名钱钱，钱钱居然会说话，并教会了主人公很多理财方面的知识。然后通过介绍了主人公的很多朋友、邻居等人的理财活动，讲述了理财的知识。具体的内容就不说了，但里面有一些话还是非常值得思考的，当然也可以理解成为心灵鸡汤。我也做过基金投资，也做出了非常错误的操作，因此对我来说很多是醍醐灌顶，其实跟做人处事的态度也是非常类似。我觉得自己非常有必要学习、记录下来。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android线程池的使用</title>
    <link href="http://yoursite.com/2016/06/25/Android%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/06/25/Android线程池的使用/</id>
    <published>2016-06-25T10:13:54.000Z</published>
    <updated>2016-06-26T04:14:21.000Z</updated>
    
    <content type="html">&lt;p&gt;Android App的开发中，经常需要用到线程。执行网络操作、进行数据库查找等异步操作。线程池的使用可以更方便的使用线程，记录一下对线程池的一些理解。&lt;/p&gt;
&lt;h1 id=&quot;1、为什么要用线程池？&quot;&gt;&lt;a href=&quot;#1、为什么要用线程池？&quot; class=&quot;headerlink&quot; title=&quot;1、为什么要用线程池？&quot;&gt;&lt;/a&gt;1、为什么要用线程池？&lt;/h1&gt;&lt;p&gt;线程池有什么优点，在《Android开发艺术探索》这本书上面是这样写的：&lt;br&gt;1.1、重用线程池中的线程，避免因为线程的创建和销毁所带来的性能开销；&lt;br&gt;1.2、能有效控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源而导致的阻塞现象；&lt;br&gt;1.3、能够对线程进行简单的管理，并提供定时执行以及在指定间隔循环执行等功能。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2、熟悉几个概念&quot;&gt;&lt;a href=&quot;#2、熟悉几个概念&quot; class=&quot;headerlink&quot; title=&quot;2、熟悉几个概念&quot;&gt;&lt;/a&gt;2、熟悉几个概念&lt;/h1&gt;&lt;p&gt;Executor是一个接口，线程池的实现类是ThreadPoolExecutor。ThreadPoolExecutor的构造方法里面的参数：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public ThreadPoolExecutor (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int corePoolSize, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int maxmumPoolSize, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long keepAliveTime, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TimeUnit unit, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BlockingQueue&amp;lt;Runnable runnable&amp;gt; workQueue, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ThreadFactory threadFactory)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-1、corePoolSize&quot;&gt;&lt;a href=&quot;#2-1、corePoolSize&quot; class=&quot;headerlink&quot; title=&quot;2.1、corePoolSize&quot;&gt;&lt;/a&gt;2.1、corePoolSize&lt;/h2&gt;&lt;p&gt;核心线程数，会在线程池里面一直存活的线程，也就是能够及时快速响应任务的执行。但可以通过设置allowCoreThreadTimeOut设置为闲置等待keepAliveTime而终止。&lt;/p&gt;
&lt;h2 id=&quot;2-2、maxmumPoolSize&quot;&gt;&lt;a href=&quot;#2-2、maxmumPoolSize&quot; class=&quot;headerlink&quot; title=&quot;2.2、maxmumPoolSize&quot;&gt;&lt;/a&gt;2.2、maxmumPoolSize&lt;/h2&gt;&lt;p&gt;最大线程数，超过最大线程数的任务会被阻塞。&lt;/p&gt;
&lt;h2 id=&quot;2-3、keepAliveTime、unit&quot;&gt;&lt;a href=&quot;#2-3、keepAliveTime、unit&quot; class=&quot;headerlink&quot; title=&quot;2.3、keepAliveTime、unit&quot;&gt;&lt;/a&gt;2.3、keepAliveTime、unit&lt;/h2&gt;&lt;p&gt;非核心线程闲置的超时时间，allowCoreThreadTimeOut = true后，对核心线程也同样起作用。&lt;/p&gt;
&lt;h2 id=&quot;2-4、workQueue&quot;&gt;&lt;a href=&quot;#2-4、workQueue&quot; class=&quot;headerlink&quot; title=&quot;2.4、workQueue&quot;&gt;&lt;/a&gt;2.4、workQueue&lt;/h2&gt;&lt;p&gt;通过execute()方法提交的runnable都会添加到该任务队列中。&lt;/p&gt;
&lt;h2 id=&quot;2-5、threadFactiry&quot;&gt;&lt;a href=&quot;#2-5、threadFactiry&quot; class=&quot;headerlink&quot; title=&quot;2.5、threadFactiry&quot;&gt;&lt;/a&gt;2.5、threadFactiry&lt;/h2&gt;&lt;p&gt;线程工厂，为线程池提供线程，可以实现指定设置的线程。&lt;br&gt;随着任务的增多，线程池会首先考虑核心线程，再考虑插入任务队列、非核心线程，再考虑线程池最大线程数，然后拒绝执行任务。&lt;/p&gt;
&lt;h1 id=&quot;3、线程池的分类&quot;&gt;&lt;a href=&quot;#3、线程池的分类&quot; class=&quot;headerlink&quot; title=&quot;3、线程池的分类&quot;&gt;&lt;/a&gt;3、线程池的分类&lt;/h1&gt;&lt;h2 id=&quot;3-1、FixedThreadPool&quot;&gt;&lt;a href=&quot;#3-1、FixedThreadPool&quot; class=&quot;headerlink&quot; title=&quot;3.1、FixedThreadPool&quot;&gt;&lt;/a&gt;3.1、FixedThreadPool&lt;/h2&gt;&lt;p&gt;只有数量固定的核心线程，并且没有超时机制，任务队列没有大小限制。快速响应外界的请求。&lt;/p&gt;
&lt;h2 id=&quot;3-2、CachedThreadPool&quot;&gt;&lt;a href=&quot;#3-2、CachedThreadPool&quot; class=&quot;headerlink&quot; title=&quot;3.2、CachedThreadPool&quot;&gt;&lt;/a&gt;3.2、CachedThreadPool&lt;/h2&gt;&lt;p&gt;只有非核心线程，线程数为Integer.MAX_VALUE，闲置线程超时时长为60秒，任务队列为空集合，任何任务都会立即执行，适合大量耗时较少的任务。整个线程池也可能处于闲置状态，几乎不占用系统资源。&lt;/p&gt;
&lt;h2 id=&quot;3-3、ScheduledThreadPool&quot;&gt;&lt;a href=&quot;#3-3、ScheduledThreadPool&quot; class=&quot;headerlink&quot; title=&quot;3.3、ScheduledThreadPool&quot;&gt;&lt;/a&gt;3.3、ScheduledThreadPool&lt;/h2&gt;&lt;p&gt;核心线程数固定，非核心线程数没有限制，闲置时会被立即回收，执行定时任务和具有固定周期的循环任务。&lt;/p&gt;
&lt;h2 id=&quot;3-4、SingleTheadExecutor&quot;&gt;&lt;a href=&quot;#3-4、SingleTheadExecutor&quot; class=&quot;headerlink&quot; title=&quot;3.4、SingleTheadExecutor&quot;&gt;&lt;/a&gt;3.4、SingleTheadExecutor&lt;/h2&gt;&lt;p&gt;只有一个核心线程，所有任务都会在同一个线程中按顺序执行，任务之间不需要处理线程同步的问题。&lt;/p&gt;
&lt;h1 id=&quot;4、注意事项&quot;&gt;&lt;a href=&quot;#4、注意事项&quot; class=&quot;headerlink&quot; title=&quot;4、注意事项&quot;&gt;&lt;/a&gt;4、注意事项&lt;/h1&gt;&lt;p&gt;线程池的关闭，threadPool.submit()&lt;br&gt;调用后，如果再往线程池中添加任务，就会抛异常，thread = 0&lt;br&gt;如果只是想要终止该任务，可以使用以下方式：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FutureTask.cancel(true);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关于Future、FutureTask可以参考：&lt;a href=&quot;http://www.cnblogs.com/wenjiang/archive/2012/09/02/2668089.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新手浅谈Future&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android App的开发中，经常需要用到线程。执行网络操作、进行数据库查找等异步操作。线程池的使用可以更方便的使用线程，记录一下对线程池的一些理解。&lt;/p&gt;
&lt;h1 id=&quot;1、为什么要用线程池？&quot;&gt;&lt;a href=&quot;#1、为什么要用线程池？&quot; class=&quot;headerlink&quot; title=&quot;1、为什么要用线程池？&quot;&gt;&lt;/a&gt;1、为什么要用线程池？&lt;/h1&gt;&lt;p&gt;线程池有什么优点，在《Android开发艺术探索》这本书上面是这样写的：&lt;br&gt;1.1、重用线程池中的线程，避免因为线程的创建和销毁所带来的性能开销；&lt;br&gt;1.2、能有效控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源而导致的阻塞现象；&lt;br&gt;1.3、能够对线程进行简单的管理，并提供定时执行以及在指定间隔循环执行等功能。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android自定义View(一)</title>
    <link href="http://yoursite.com/2016/06/05/Android%E8%87%AA%E5%AE%9A%E4%B9%89View(%E4%B8%80)/"/>
    <id>http://yoursite.com/2016/06/05/Android自定义View(一)/</id>
    <published>2016-06-05T07:37:09.000Z</published>
    <updated>2016-06-26T04:15:36.000Z</updated>
    
    <content type="html">&lt;p&gt;关于自定义View，是Android学习的必经之路，个人觉得自定义View更重要的是关于绘图的计算算法，利用Android提供的API结合算法，才能绘制出比较复杂的图形。这次做的是一个时钟的自定义View Demo，熟悉下自定义View的各个步骤。先看下基本效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lextime2013/view/master/show.gif&quot; alt=&quot;image&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;一、实现自定义View流程&quot;&gt;&lt;a href=&quot;#一、实现自定义View流程&quot; class=&quot;headerlink&quot; title=&quot;一、实现自定义View流程&quot;&gt;&lt;/a&gt;一、实现自定义View流程&lt;/h5&gt;&lt;p&gt;onMeasure() -&amp;gt; onSizeChange() -&amp;gt; onLayout() -&amp;gt; onDraw()&lt;/p&gt;
&lt;p&gt;其中，onLayout()是父View布局子View的时候需要，也就是自定义ViewGroup的时候，这次我们没有使用到。&lt;/p&gt;
&lt;h6 id=&quot;onMeasure&quot;&gt;&lt;a href=&quot;#onMeasure&quot; class=&quot;headerlink&quot; title=&quot;onMeasure()&quot;&gt;&lt;/a&gt;onMeasure()&lt;/h6&gt;&lt;p&gt;测量View的大小，在Android系统加载布局的时候，系统先测量各个子View的大小，然后通知父View需要多大的空间，父View再根据自身的大小来决定分配多少空间给子View。有三种测量模式：&lt;/p&gt;
&lt;p&gt;MeasureSpec.EXACTLY：一般是设置了明确的值或者是match_parent &lt;/p&gt;
&lt;p&gt;MeasureSpec.AT_MOST：子视图存在最大值，一般为warp_content &lt;/p&gt;
&lt;p&gt;MeasureSpec.UNSPECIFIED：子视图可以是任意想要的大小，ScrollView这种&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.onMeasure(widthMeasureSpec, heightMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int width = MeasureSpec.getSize(widthMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int height = MeasureSpec.getSize(heightMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int widthMode = MeasureSpec.getMode(widthMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int heightMode = MeasureSpec.getSize(heightMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int circleRadius = Math.min(width, height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(widthMode == MeasureSpec.UNSPECIFIED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        circleRadius = height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if(heightMode == MeasureSpec.UNSPECIFIED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        circleRadius = width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setMeasuredDimension(circleRadius, circleRadius);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&quot;onSizeChange&quot;&gt;&lt;a href=&quot;#onSizeChange&quot; class=&quot;headerlink&quot; title=&quot;onSizeChange()&quot;&gt;&lt;/a&gt;onSizeChange()&lt;/h6&gt;&lt;p&gt;这个方法可以知道布局的大小，并且是在View的大小发生改变的时候，也会调用这个方法，也就是通过这个方法，绘制的大小也能够动态发生改变。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;protected void onSizeChanged(int w, int h, int oldw, int oldh) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.onSizeChanged(w, h, oldw, oldh);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(mRadius &amp;lt;= 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRadius = w / 2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mSecondLineX = mMinuteLineX = mHourLineX = mRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mSecondLineY = mMinuteLineY = mHourLineY = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&quot;onLayout&quot;&gt;&lt;a href=&quot;#onLayout&quot; class=&quot;headerlink&quot; title=&quot;onLayout()&quot;&gt;&lt;/a&gt;onLayout()&lt;/h6&gt;&lt;p&gt;也可以获取布局的大小，但通常实现自定义ViewGroup的时候需要。&lt;/p&gt;
&lt;h6 id=&quot;onDraw&quot;&gt;&lt;a href=&quot;#onDraw&quot; class=&quot;headerlink&quot; title=&quot;onDraw()&quot;&gt;&lt;/a&gt;onDraw()&lt;/h6&gt;&lt;p&gt;测量方法，也就是自定义View中最重要的方法，调用频率高，不应该在该方法初始化变量、申请内存、耗时操作。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;protected void onDraw(Canvas canvas) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.onDraw(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    postInvalidateDelayed(1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    calculateTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 表盘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mPaint.setColor(mContext.getResources().getColor(R.color.black));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvas.drawCircle(mRadius, mRadius, mRadius, mPaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mPaint.setColor(mContext.getResources().getColor(R.color.white));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvas.drawCircle(mRadius, mRadius, mRadius * 14F / 15F, mPaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    drawNumber(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 时分秒针&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvas.drawLine(mRadius, mRadius, mSecondLineX, mSecondLineY, mSecondPaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvas.drawLine(mRadius, mRadius, mMinuteLineX, mMinuteLineY, mMinutePaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvas.drawLine(mRadius, mRadius, mHourLineX, mHourLineY, mHourPaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 中点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvas.drawCircle(mRadius, mRadius, 20, mMinutePaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    drawTime(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;二、用户交互，响应触摸事件&quot;&gt;&lt;a href=&quot;#二、用户交互，响应触摸事件&quot; class=&quot;headerlink&quot; title=&quot;二、用户交互，响应触摸事件&quot;&gt;&lt;/a&gt;二、用户交互，响应触摸事件&lt;/h5&gt;&lt;h6 id=&quot;onTouchEvent&quot;&gt;&lt;a href=&quot;#onTouchEvent&quot; class=&quot;headerlink&quot; title=&quot;onTouchEvent()&quot;&gt;&lt;/a&gt;onTouchEvent()&lt;/h6&gt;&lt;p&gt;上面几个方法是将自定义View绘制出来，想要与用户发生交互，还要通过onTouchEvent()实现。&lt;br&gt;通过对ACTION_DOWN、ACTION_MOVE、ACTION_UP三个事件进行处理，处理用户的触摸事件，达到与用户交互的需求。这里demo对时间数字的区域进行判断，如果在数字区域，那么允许拖拽，并且拖拽的过程中需要判断数字的四个角，不能超出表盘的半径（这里面并非有实际的意义，只是为了实现demo的算法需求）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public boolean onTouchEvent(MotionEvent event) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    switch (event.getAction()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case MotionEvent.ACTION_DOWN:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mClickX = event.getX();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mClickY = event.getY();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if(mRect.contains((int) (mClickX - mTextX), (int) (mClickY - mTextY))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mIsDrag = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case MotionEvent.ACTION_MOVE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if(mIsDrag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float x = event.getX() - mClickX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float y = event.getY() - mClickY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mClickX = event.getX();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mClickY = event.getY();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float tempX1 = mTextX + x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float tempX2 = tempX1 + mRect.width();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float tempY1 = mTextY + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float tempY2 = tempY1 - mRect.height();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 左上角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float lenX1 = tempX1 - mRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float lenY1 = tempY1 - mRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float len1 = (float) Math.sqrt(lenX1 * lenX1 + lenY1 * lenY1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 左下角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float lenX2 = tempX1 - mRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float lenY2 = tempY2 - mRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float len2 = (float) Math.sqrt(lenX2 * lenX2 + lenY2 * lenY2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 右上角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float lenX3 = tempX2 - mRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float lenY3 = tempY1 - mRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float len3 = (float) Math.sqrt(lenX3 * lenX3 + lenY3 * lenY3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 右下角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float lenX4 = tempX2 - mRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float lenY4 = tempY2 - mRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float len4 = (float) Math.sqrt(lenX4 * lenX4 + lenY4 * lenY4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if(len1 &amp;gt; mRadius || len2 &amp;gt; mRadius || len3 &amp;gt; mRadius || len4 &amp;gt; mRadius) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mTextX = tempX1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mTextY = tempY1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                invalidate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case MotionEvent.ACTION_UP:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if(mIsDrag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mIsDrag = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        default:break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;三、实现动画&quot;&gt;&lt;a href=&quot;#三、实现动画&quot; class=&quot;headerlink&quot; title=&quot;三、实现动画&quot;&gt;&lt;/a&gt;三、实现动画&lt;/h5&gt;&lt;p&gt;自定义View有要求动画的，可以调用自身的invilidate()，或者非UI线程的postInvalidate()刷新自身，这时候自定义View会重新调用onDraw()方法，以达到View的动画效果。&lt;br&gt;postInvalidateDelay()还可以实现延迟发送刷新消息，将该方法写在onDraw()方法里面，延迟1000毫秒刷新一次，从而实现了时钟每一秒对时分秒针、时间数字的刷新需求。&lt;/p&gt;
&lt;h5 id=&quot;四、算法&quot;&gt;&lt;a href=&quot;#四、算法&quot; class=&quot;headerlink&quot; title=&quot;四、算法&quot;&gt;&lt;/a&gt;四、算法&lt;/h5&gt;&lt;p&gt;在自定义View中，绘图算法是挺重要的，这直接影响到能不能按照设计绘制出来，这里demo是对时分秒针的位置的算法，以及拖拽的过程中，判断不可以越界的算法。结合源码参考calculateTime()、onTouchEvent()&lt;/p&gt;
&lt;h5 id=&quot;五、自定义属性&quot;&gt;&lt;a href=&quot;#五、自定义属性&quot; class=&quot;headerlink&quot; title=&quot;五、自定义属性&quot;&gt;&lt;/a&gt;五、自定义属性&lt;/h5&gt;&lt;p&gt;可以设置自定义的属性，比如设置时钟的半径大小&lt;/p&gt;
&lt;h6 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h6&gt;&lt;p&gt;在/values/attrs.xml里面定义&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;declare-styleable name=&amp;quot;CircleView&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;attr name=&amp;quot;radius&amp;quot; format=&amp;quot;dimension&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/declare-styleable&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&quot;获取&quot;&gt;&lt;a href=&quot;#获取&quot; class=&quot;headerlink&quot; title=&quot;获取&quot;&gt;&lt;/a&gt;获取&lt;/h6&gt;&lt;p&gt;然后在代码里面使用，可以在构造方法里面取出来&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TypedArray typedArray = context.getTheme().obtainStyledAttributes(attributeSet, R.styleable.CircleView, defStyleAttr, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if(typedArray != null &amp;amp;&amp;amp; typedArray.getIndexCount() &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(int i = 0; i &amp;lt; typedArray.getIndexCount(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        switch (typedArray.getIndex(i)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case R.styleable.CircleView_radius:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mRadius = typedArray.getDimension(i, 400F);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    typedArray.recycle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h6 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;com.lextime2013.view.widget.TimeView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xmlns:custom=&amp;quot;http://schemas.android.com/apk/res-auto&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:id=&amp;quot;@+id/circle_view&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    custom:radius=&amp;quot;160dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;六、注意事项&quot;&gt;&lt;a href=&quot;#六、注意事项&quot; class=&quot;headerlink&quot; title=&quot;六、注意事项&quot;&gt;&lt;/a&gt;六、注意事项&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;字体起点(x, y)是指左下角&lt;/li&gt;
&lt;li&gt;onDraw()不要进行初始化工作，不可以进行申请内存、耗时操作&lt;/li&gt;
&lt;li&gt;没特殊情况，注意使用float类型处理坐标&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源码已上传github&lt;br&gt;&lt;a href=&quot;https://github.com/lextime2013/view/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/lextime2013/view/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于自定义View，是Android学习的必经之路，个人觉得自定义View更重要的是关于绘图的计算算法，利用Android提供的API结合算法，才能绘制出比较复杂的图形。这次做的是一个时钟的自定义View Demo，熟悉下自定义View的各个步骤。先看下基本效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lextime2013/view/master/show.gif&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android蓝牙通信</title>
    <link href="http://yoursite.com/2016/05/30/Android%E8%93%9D%E7%89%99%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2016/05/30/Android蓝牙通信/</id>
    <published>2016-05-30T14:04:37.000Z</published>
    <updated>2016-06-28T15:47:14.000Z</updated>
    
    <content type="html">&lt;p&gt;近来工作做了很多Android手机对接蓝牙设备的工作，记录一下。&lt;/p&gt;
&lt;h4 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h4&gt;&lt;p&gt;需要对接蓝牙设备，发送或者获取数据，比如蓝牙打印机、蓝牙体脂称、蓝牙电子血压计、蓝牙血糖仪、蓝牙身高尺等等。大致的过程就是手机跟设备互相连接认证，互传数据的过程。当然，对接不同的设备，会有不同的交互流程，同一类设备，针对不同厂商，也需要遵循不同厂商定制的SDK的相关协议。但都离不开蓝牙的核心协议，下面分经典蓝牙2.0以及低功耗蓝牙4.0（BLE）。&lt;/p&gt;
&lt;h4 id=&quot;经典蓝牙2-0&quot;&gt;&lt;a href=&quot;#经典蓝牙2-0&quot; class=&quot;headerlink&quot; title=&quot;经典蓝牙2.0&quot;&gt;&lt;/a&gt;经典蓝牙2.0&lt;/h4&gt;&lt;p&gt;比较传统的设备只支持蓝牙2.0，SPP协议、HDP协议&lt;br&gt;过程：扫描，配对，连接，通信&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;参考：&lt;a href=&quot;http://blog.csdn.net/q610098308/article/details/45248423&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 蓝牙开发基本流程&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;1、通用UUID：&quot;&gt;&lt;a href=&quot;#1、通用UUID：&quot; class=&quot;headerlink&quot; title=&quot;1、通用UUID：&quot;&gt;&lt;/a&gt;1、通用UUID：&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private static final UUID SPP_UUID = UUID.fromString(&amp;quot;00001101-0000-1000-8000-00805F9B34FB&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;2、配对，反射设置密码（如果需要设置的话）&quot;&gt;&lt;a href=&quot;#2、配对，反射设置密码（如果需要设置的话）&quot; class=&quot;headerlink&quot; title=&quot;2、配对，反射设置密码（如果需要设置的话）&quot;&gt;&lt;/a&gt;2、配对，反射设置密码（如果需要设置的话）&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Method removeBondMethod = btClass.getDeclaredMethod(&amp;quot;setPin&amp;quot;,  new Class[] &amp;#123; byte[].class &amp;#125;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return value = (Boolean) removeBondMethod.invoke(bluetoothDevice,  new Object[] &amp;#123; password.getBytes() &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;3、配对，反射调用绑定方法&quot;&gt;&lt;a href=&quot;#3、配对，反射调用绑定方法&quot; class=&quot;headerlink&quot; title=&quot;3、配对，反射调用绑定方法&quot;&gt;&lt;/a&gt;3、配对，反射调用绑定方法&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Method createBondMethod = btClass.getMethod(&amp;quot;createBond&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Boolean value = (Bovolean) createBondMethod.invoke(btDevice);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;4、连接，根据不同SDK方式&quot;&gt;&lt;a href=&quot;#4、连接，根据不同SDK方式&quot; class=&quot;headerlink&quot; title=&quot;4、连接，根据不同SDK方式&quot;&gt;&lt;/a&gt;4、连接，根据不同SDK方式&lt;/h5&gt;&lt;p&gt;问题：getBluetoothService() called with no BluetoothManagerCallback&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int sdk = Build.VERSION.SDK_INT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (sdk &amp;gt;= 10) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    socket = mDevice.createInsecureRfcommSocketToServiceRecord(SPP_UUID);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    socket = mDevice.createRfcommSocketToServiceRecord(SPP_UUID);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;低功耗蓝牙4-0技术（BLE）&quot;&gt;&lt;a href=&quot;#低功耗蓝牙4-0技术（BLE）&quot; class=&quot;headerlink&quot; title=&quot;低功耗蓝牙4.0技术（BLE）&quot;&gt;&lt;/a&gt;低功耗蓝牙4.0技术（BLE）&lt;/h4&gt;&lt;p&gt;注意：从Android4.3（API-18）开始支持BLE，但只支持作为中心设备模式Central，也就是只支持Android设备主动扫描连接外围设备Peripheral，在Android5.0（API-21）两种模式都支持。蓝牙4.0将三种规格集一体，包括传统蓝牙技术、高速技术和低耗能技术&lt;br&gt;参考：&lt;a href=&quot;http://blog.csdn.net/zhaoshuzhaoshu/article/details/35281301/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最全最详细的蓝牙版本介绍包含蓝牙4.0和4.1&lt;/a&gt;&lt;br&gt;过程：扫描，连接，发现服务，通信&lt;/p&gt;
&lt;h5 id=&quot;1、获取BluetoothAdapter&quot;&gt;&lt;a href=&quot;#1、获取BluetoothAdapter&quot; class=&quot;headerlink&quot; title=&quot;1、获取BluetoothAdapter&quot;&gt;&lt;/a&gt;1、获取BluetoothAdapter&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mBluetoothAdapter = bluetoothManager.getAdapter();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;2、判断是否支持蓝牙，并打开蓝牙-利用系统Intent的方式请求打开蓝牙&quot;&gt;&lt;a href=&quot;#2、判断是否支持蓝牙，并打开蓝牙-利用系统Intent的方式请求打开蓝牙&quot; class=&quot;headerlink&quot; title=&quot;2、判断是否支持蓝牙，并打开蓝牙(利用系统Intent的方式请求打开蓝牙)&quot;&gt;&lt;/a&gt;2、判断是否支持蓝牙，并打开蓝牙(利用系统Intent的方式请求打开蓝牙)&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;3、搜索BLE设备&quot;&gt;&lt;a href=&quot;#3、搜索BLE设备&quot; class=&quot;headerlink&quot; title=&quot;3、搜索BLE设备&quot;&gt;&lt;/a&gt;3、搜索BLE设备&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mBluetoothAdapter.startLeScan(mLeScanCallback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BluetoothAdapter.LeScanCallback // 搜索回调&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：搜索时，你只能搜索传统蓝牙设备或者BLE设备，两者完全独立，不可同时被搜索。&lt;br&gt;实际使用：使用经典蓝牙搜索方式startDiscovery()能同时搜索到百捷2.0和百捷4.0的设备&lt;/p&gt;
&lt;h5 id=&quot;4、连接GATT-Server&quot;&gt;&lt;a href=&quot;#4、连接GATT-Server&quot; class=&quot;headerlink&quot; title=&quot;4、连接GATT Server&quot;&gt;&lt;/a&gt;4、连接GATT Server&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mBluetoothGatt = device.connectGatt(this, false, mGattCallback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BluetoothGattCallback // 连接回调&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;5、连接成功。BluetoothGatt常规用到的几个操作示例&quot;&gt;&lt;a href=&quot;#5、连接成功。BluetoothGatt常规用到的几个操作示例&quot; class=&quot;headerlink&quot; title=&quot;5、连接成功。BluetoothGatt常规用到的几个操作示例&quot;&gt;&lt;/a&gt;5、连接成功。BluetoothGatt常规用到的几个操作示例&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;connect(); // 连接远程设备。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;discoverServices(); // 搜索连接设备所支持的service。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;disconnect(); // 断开与远程设备的GATT连接。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;close(); // 关闭GATT Client端。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;readCharacteristic(characteristic); // 读取指定的characteristic。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setCharacteristicNotification(characteristic, enabled); // 设置当指定characteristic值变化时，发出通知。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getServices(); // 获取远程设备所支持的services。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;一些实践心得&quot;&gt;&lt;a href=&quot;#一些实践心得&quot; class=&quot;headerlink&quot; title=&quot;一些实践心得&quot;&gt;&lt;/a&gt;一些实践心得&lt;/h4&gt;&lt;h5 id=&quot;关于蓝牙硬件&quot;&gt;&lt;a href=&quot;#关于蓝牙硬件&quot; class=&quot;headerlink&quot; title=&quot;关于蓝牙硬件&quot;&gt;&lt;/a&gt;关于蓝牙硬件&lt;/h5&gt;&lt;p&gt;对接蓝牙设备，一方面由于蓝牙设备的多样性，另一方面Android手机硬件、系统的多样性，会遇到比较多的问题就是蓝牙连接的稳定性问题。关于这个问题也是尝试了很多种方法去避免，分析其中一个原因就是：由代码驱动蓝牙硬件的过程，需要一定的时间，一定的时间等待，会带来极大稳定性的提高。比如启动蓝牙后延迟300ms在执行其他操作。另一个就是可以采用线程轮询判断一个状态是否已经启动，比如循环5次，每隔1秒执行判断操作。&lt;/p&gt;
&lt;h5 id=&quot;关于优化&quot;&gt;&lt;a href=&quot;#关于优化&quot; class=&quot;headerlink&quot; title=&quot;关于优化&quot;&gt;&lt;/a&gt;关于优化&lt;/h5&gt;&lt;p&gt;必要时，考虑采用服务Service去获取设备的数据，或者设置单例模式。&lt;/p&gt;
&lt;p&gt;如有错误，欢迎拍砖！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;近来工作做了很多Android手机对接蓝牙设备的工作，记录一下。&lt;/p&gt;
&lt;h4 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h4&gt;&lt;p&gt;需要对接蓝牙设备，发送或者获取数据，比如蓝牙打印机、蓝牙体脂称、蓝牙电子血压计、蓝牙血糖仪、蓝牙身高尺等等。大致的过程就是手机跟设备互相连接认证，互传数据的过程。当然，对接不同的设备，会有不同的交互流程，同一类设备，针对不同厂商，也需要遵循不同厂商定制的SDK的相关协议。但都离不开蓝牙的核心协议，下面分经典蓝牙2.0以及低功耗蓝牙4.0（BLE）。&lt;/p&gt;
&lt;h4 id=&quot;经典蓝牙2-0&quot;&gt;&lt;a href=&quot;#经典蓝牙2-0&quot; class=&quot;headerlink&quot; title=&quot;经典蓝牙2.0&quot;&gt;&lt;/a&gt;经典蓝牙2.0&lt;/h4&gt;&lt;p&gt;比较传统的设备只支持蓝牙2.0，SPP协议、HDP协议&lt;br&gt;过程：扫描，配对，连接，通信&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>容易犯错的知识点</title>
    <link href="http://yoursite.com/2016/05/29/%E5%AE%B9%E6%98%93%E7%8A%AF%E9%94%99%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2016/05/29/容易犯错的知识点/</id>
    <published>2016-05-28T16:27:00.000Z</published>
    <updated>2016-06-26T04:15:55.000Z</updated>
    
    <content type="html">&lt;h5 id=&quot;JAVA篇&quot;&gt;&lt;a href=&quot;#JAVA篇&quot; class=&quot;headerlink&quot; title=&quot;JAVA篇&quot;&gt;&lt;/a&gt;JAVA篇&lt;/h5&gt;&lt;p&gt;1、强转，(String)msg.obj —&amp;gt; (String)null，可以执行&lt;/p&gt;
&lt;p&gt;2、遍历，String str : List&lt;string&gt;，如果list是null会崩溃&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;3、集合添加，list.add(null)，可以执行，但list.addAll(null)，会崩溃&lt;/p&gt;
&lt;p&gt;4、包装类型，String.valueOf(null); 会崩溃&lt;/p&gt;
&lt;p&gt;5、从资源文件中获取颜色&lt;br&gt;textView.setTextColor(getResources().getColor(R.color.colorPrimary));&lt;/p&gt;
&lt;p&gt;6、从资源中获取字体大小&lt;br&gt;textView.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimension(R.dimen.text_sp));&lt;/p&gt;
&lt;p&gt;7、从资源文件中获取size，dp、sp、px —&amp;gt; px，相同的sp、dp会 * density 转换成为相同的px，px会直接得到px&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;getDimensionPixelOffset() // 去除小数部分int&lt;/p&gt;
&lt;p&gt;getDimensionPixelSize() // 获取四舍五入int&lt;/p&gt;
&lt;p&gt;getDimension() // 获取float&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;JAVA篇&quot;&gt;&lt;a href=&quot;#JAVA篇&quot; class=&quot;headerlink&quot; title=&quot;JAVA篇&quot;&gt;&lt;/a&gt;JAVA篇&lt;/h5&gt;&lt;p&gt;1、强转，(String)msg.obj —&amp;gt; (String)null，可以执行&lt;/p&gt;
&lt;p&gt;2、遍历，String str : List&lt;String&gt;，如果list是null会崩溃&lt;/p&gt;
&lt;p&gt;3、集合添加，list.add(null)，可以执行，但list.addAll(null)，会崩溃&lt;/p&gt;
&lt;p&gt;4、包装类型，String.valueOf(null); 会崩溃&lt;/p&gt;
&lt;p&gt;5、从资源文件中获取颜色&lt;br&gt;textView.setTextColor(getResources().getColor(R.color.colorPrimary));&lt;/p&gt;
&lt;p&gt;6、从资源中获取字体大小&lt;br&gt;textView.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimension(R.dimen.text_sp));&lt;/p&gt;
&lt;p&gt;7、从资源文件中获取size，dp、sp、px —&amp;gt; px，相同的sp、dp会 * density 转换成为相同的px，px会直接得到px&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Eclipse项目迁移到Android Studio的一种方式</title>
    <link href="http://yoursite.com/2016/05/23/Eclipse%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0Android%20Studio%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/05/23/Eclipse项目迁移到Android Studio的一种方式/</id>
    <published>2016-05-23T13:52:23.000Z</published>
    <updated>2016-06-28T15:34:00.000Z</updated>
    
    <content type="html">&lt;h5 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h5&gt;&lt;p&gt;不知道你们公司是不是还停留在eclipse IDE呢，是不是觉得由于项目依赖太麻烦就一直没迁移过去呢。Android Studio 2.0 都发布第三版预览版本了，Google也早已停止了对ADT插件的更新。&lt;/p&gt;
&lt;p&gt;但将老项目迁移过去确实有点麻烦，各种项目依赖、各种gradle build…什么的导致崩溃卡机。我已被虐过千百遍，但依然对它如初恋。我实践了一种方式，下面主要讲一下大体思路，对gradle完全不熟悉的话可能会被省去了一些细节。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;基本准备&quot;&gt;&lt;a href=&quot;#基本准备&quot; class=&quot;headerlink&quot; title=&quot;基本准备&quot;&gt;&lt;/a&gt;基本准备&lt;/h5&gt;&lt;p&gt;下载android studio，我这里用android studio1.3、1.4都试过，&lt;br&gt;新建一个工程，都是默认，确保这个工程能运行。然后看看这个工程文件，目录结构&lt;br&gt;&lt;img src=&quot;https://github.com/lextime2013/lextime2013.github.io/blob/master/images/picture/20160523_01.jpg?raw=true&quot; alt=&quot;image&quot;&gt;&lt;br&gt;这里写图片描述&lt;br&gt;.gradle、.idea、build、都是运行时产生，删除。重要的是gradle文件夹，gradlew，gradlew.bat，build.gradle，setting.gradle。然后熟悉其他文件是干嘛用的，是否删除或修改取决于你原来的eclipse项目。&lt;/p&gt;
&lt;h5 id=&quot;新建文件夹然后copy工作&quot;&gt;&lt;a href=&quot;#新建文件夹然后copy工作&quot; class=&quot;headerlink&quot; title=&quot;新建文件夹然后copy工作&quot;&gt;&lt;/a&gt;新建文件夹然后copy工作&lt;/h5&gt;&lt;p&gt;新建一个文件夹，按照上面MyApplication的目录结构，copy一份，其中需要从eclipse项目中迁移过来的有src源代码，还有res资源，注意修改主工程build.gradle里面的applicationId。然后用Android Studio打开新建的项目即可。&lt;/p&gt;
&lt;h5 id=&quot;如何解决项目依赖&quot;&gt;&lt;a href=&quot;#如何解决项目依赖&quot; class=&quot;headerlink&quot; title=&quot;如何解决项目依赖&quot;&gt;&lt;/a&gt;如何解决项目依赖&lt;/h5&gt;&lt;p&gt;很多情况下，并不想把原来的project变成一个module，所以有了工程中的module依赖。这里需要手动配置setting.gradle文件，添加&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;include &amp;apos;:projectName&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project(&amp;apos;:projectName&amp;apos;).projectDir = new File(settingsDir, &amp;apos;../projectName/moduleName&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在主工程的module的build.gradle文件里面添加&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile project(&amp;apos;:projectName&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同步一下，这里就实现了对工程projectName中的module依赖。&lt;br&gt;可以参考：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/avenwu/p/4299340.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/avenwu/p/4299340.html&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;遇到的一些问题&quot;&gt;&lt;a href=&quot;#遇到的一些问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的一些问题&quot;&gt;&lt;/a&gt;遇到的一些问题&lt;/h5&gt;&lt;p&gt;1、Android6.0在api 23以上没有了apache的包，也就是没有了HttpClient等网络相关的类，需要使用的可以从以下路径找到，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;**\android-sdk-windows\platforms\android-23\optional&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;copy到工程的libs里面，并在build.gradle里面添加：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;useLibrary &amp;apos;org.apache.http.legacy&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、主工程module的build.gradle里面是&lt;/p&gt;
&lt;p&gt;apply plugin: ‘com.android.application’&lt;/p&gt;
&lt;p&gt;依赖工程module的build.gradle里面应该是依赖库的形式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.android.library&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3、依赖工程里面不需要applicationId。&lt;/p&gt;
&lt;p&gt;4、androidManifest.xml里面的appIication icon冲突可以删除或修改，错误日志：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Error:Execution failed for task &amp;apos;:app:processDebugManifest&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Manifest merger failed : Attribute application@icon value=(@drawable/logo) from AndroidManifest.xml:49:9-38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; is also present at&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5、引用重复的jar包，删除其中一个，错误日志：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Error:Execution failed for task &amp;apos;:app:dexDebug&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; com.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process &amp;apos;command &amp;apos;D:\Program Files\Java\jdk1.7.0_80\bin\java.exe&amp;apos;&amp;apos; finished with non-zero exit value 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;6、错误日志：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Error:Execution failed for task &amp;apos;:app:packageDebug&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Duplicate files copied in APK META-INF/LICENSE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按照提示，添加：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    packagingOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exclude &amp;apos;META-INF/LICENSE&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exclude &amp;apos;META-INF/DEPENDENCIES&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exclude &amp;apos;META-INF/NOTICE&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exclude &amp;apos;META-INF/LICENSE.txt&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exclude &amp;apos;META-INF/NOTICE.txt&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h5&gt;&lt;p&gt;也就是将标准Android Studio工程里面的gradle相关文件原汁原味的copy到另外一个新建的、具有相同目录结构的文件夹里面，做一些相应的配置修改。打开Android Studio运行。&lt;/p&gt;
&lt;h5 id=&quot;为什么使用这种方式？&quot;&gt;&lt;a href=&quot;#为什么使用这种方式？&quot; class=&quot;headerlink&quot; title=&quot;为什么使用这种方式？&quot;&gt;&lt;/a&gt;为什么使用这种方式？&lt;/h5&gt;&lt;p&gt;网上比较多的教程是eclipse导出gradle项目，生成build.gradle文件，再用android studio导入，我会觉得这个项目有点奇葩，各种ant、gradle构建的东西混杂在一起（对不起，我有代码洁癖），还会因为gradle构建版本的各种问题而运行不起来，而且项目依赖也并不怎么清晰。或许还有更简便的方法，我在瞎折腾了。&lt;/p&gt;
&lt;h5 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h5&gt;&lt;p&gt;最后想说明一点，这是其中一种方式，我实践可用，记录下来一方面自己学习温故，另一方面希望能帮到一些人，这个方法或许有不足之处，希望指正。gradle配置方面还有很多，有些没涉及到的可能还需要添加其他的配置代码。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h5&gt;&lt;p&gt;不知道你们公司是不是还停留在eclipse IDE呢，是不是觉得由于项目依赖太麻烦就一直没迁移过去呢。Android Studio 2.0 都发布第三版预览版本了，Google也早已停止了对ADT插件的更新。&lt;/p&gt;
&lt;p&gt;但将老项目迁移过去确实有点麻烦，各种项目依赖、各种gradle build…什么的导致崩溃卡机。我已被虐过千百遍，但依然对它如初恋。我实践了一种方式，下面主要讲一下大体思路，对gradle完全不熟悉的话可能会被省去了一些细节。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/05/22/hello-world/"/>
    <id>http://yoursite.com/2016/05/22/hello-world/</id>
    <published>2016-05-22T11:56:19.000Z</published>
    <updated>2016-05-22T11:56:19.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
